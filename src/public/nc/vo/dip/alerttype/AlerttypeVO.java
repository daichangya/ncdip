/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
package nc.vo.dip.alerttype;

import java.util.ArrayList;

import nc.util.dip.sj.IContrastUtil;
import nc.vo.pub.NullFieldException;
import nc.vo.pub.SuperVO;
import nc.vo.pub.ValidationException;
import nc.vo.pub.lang.UFDateTime;

/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2011-4-15
 * @author author
 * @version Your Project 1.0
 */
public class AlerttypeVO extends SuperVO {

	public String descrip_resid;
	public Integer tasktype;
	public String pk_alerttype;
	public String ts;
	public String type_name;
	public String bizconfigclass;
	public String name_resid;
	public String description;
	public Integer dr;
	public String belong_system;
	public String busi_plugin;

	public static final String  DESCRIP_RESID="descrip_resid";   
	public static final String  TASKTYPE="tasktype";   
	public static final String  PK_ALERTTYPE="pk_alerttype";   
	public static final String  TS="ts";   
	public static final String  TYPE_NAME="type_name";   
	public static final String  BIZCONFIGCLASS="bizconfigclass";   
	public static final String  NAME_RESID="name_resid";   
	public static final String  DESCRIPTION="description";   
	public static final String  DR="dr";   
	public static final String  BELONG_SYSTEM="belong_system";   
	public static final String  BUSI_PLUGIN="busi_plugin";   


	/**
	 * 属性descrip_resid的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return String
	 */
	public String getDescrip_resid() {
		return descrip_resid;
	}   

	/**
	 * 属性descrip_resid的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newDescrip_resid String
	 */
	public void setDescrip_resid(String newDescrip_resid) {

		descrip_resid = newDescrip_resid;
	} 	  

	/**
	 * 属性tasktype的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return Integer
	 */
	public Integer getTasktype() {
		return tasktype;
	}   

	/**
	 * 属性tasktype的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newTasktype Integer
	 */
	public void setTasktype(Integer newTasktype) {

		tasktype = newTasktype;
	} 	  

	/**
	 * 属性pk_alerttype的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return String
	 */
	public String getPk_alerttype() {
		return pk_alerttype;
	}   

	/**
	 * 属性pk_alerttype的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newPk_alerttype String
	 */
	public void setPk_alerttype(String newPk_alerttype) {

		pk_alerttype = newPk_alerttype;
	} 	  

	/**
	 * 属性ts的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return UFDateTime
	 */
	public Object getTs() {
		if(ts==null){
			return null;
		}else{
			if(IContrastUtil.VERSION.equals("nc502")){
				  return new UFDateTime(ts);
			  }else if(IContrastUtil.VERSION.equals("nc507")){
				  return ts;  
			  }
		}
		return ts;
	}   

	/**
	 * 属性ts的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newTs UFDateTime
	 */
	public void setTs(String newTs) {

		ts = newTs;
	} 	  

	/**
	 * 属性type_name的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return String
	 */
	public String getType_name() {
		return type_name;
	}   

	/**
	 * 属性type_name的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newType_name String
	 */
	public void setType_name(String newType_name) {

		type_name = newType_name;
	} 	  

	/**
	 * 属性bizconfigclass的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return String
	 */
	public String getBizconfigclass() {
		return bizconfigclass;
	}   

	/**
	 * 属性bizconfigclass的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newBizconfigclass String
	 */
	public void setBizconfigclass(String newBizconfigclass) {

		bizconfigclass = newBizconfigclass;
	} 	  

	/**
	 * 属性name_resid的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return String
	 */
	public String getName_resid() {
		return name_resid;
	}   

	/**
	 * 属性name_resid的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newName_resid String
	 */
	public void setName_resid(String newName_resid) {

		name_resid = newName_resid;
	} 	  

	/**
	 * 属性description的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return String
	 */
	public String getDescription() {
		return description;
	}   

	/**
	 * 属性description的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newDescription String
	 */
	public void setDescription(String newDescription) {

		description = newDescription;
	} 	  

	/**
	 * 属性dr的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return Integer
	 */
	public Integer getDr() {
		return dr;
	}   

	/**
	 * 属性dr的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newDr Integer
	 */
	public void setDr(Integer newDr) {

		dr = newDr;
	} 	  

	/**
	 * 属性belong_system的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return String
	 */
	public String getBelong_system() {
		return belong_system;
	}   

	/**
	 * 属性belong_system的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newBelong_system String
	 */
	public void setBelong_system(String newBelong_system) {

		belong_system = newBelong_system;
	} 	  

	/**
	 * 属性busi_plugin的Getter方法.
	 *
	 * 创建日期:2011-4-15
	 * @return String
	 */
	public String getBusi_plugin() {
		return busi_plugin;
	}   

	/**
	 * 属性busi_plugin的Setter方法.
	 *
	 * 创建日期:2011-4-15
	 * @param newBusi_plugin String
	 */
	public void setBusi_plugin(String newBusi_plugin) {

		busi_plugin = newBusi_plugin;
	} 	  


	/**
	 * 验证对象各属性之间的数据逻辑正确性.
	 *
	 * 创建日期:2011-4-15
	 * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	 * ValidationException,对错误进行解释.
	 */
	public void validate() throws ValidationException {

		ArrayList errFields = new ArrayList(); // errFields record those null

		// fields that cannot be null.
		// 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:

		if (pk_alerttype == null) {
			errFields.add(new String("pk_alerttype"));
		}	

		StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
			String[] temp = (String[]) errFields.toArray(new String[0]);
			message.append(temp[0]);
			for ( int i= 1; i < temp.length; i++ ) {
				message.append(",");
				message.append(temp[i]);
			}
			throw new NullFieldException(message.toString());
		}
	}


	/**
	 * <p>取得父VO主键字段.
	 * <p>
	 * 创建日期:2011-4-15
	 * @return java.lang.String
	 */
	public java.lang.String getParentPKFieldName() {

		return null;

	}   

	/**
	 * <p>取得表主键.
	 * <p>
	 * 创建日期:2011-4-15
	 * @return java.lang.String
	 */
	public java.lang.String getPKFieldName() {
		return "pk_alerttype";
	}

	/**
	 * <p>返回表名称.
	 * <p>
	 * 创建日期:2011-4-15
	 * @return java.lang.String
	 */
	public java.lang.String getTableName() {

		return "pub_alerttype";
	}    

	/**
	 * 按照默认方式创建构造子.
	 *
	 * 创建日期:2011-4-15
	 */
	public AlerttypeVO() {

		super();	
	}    

	/**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2011-4-15
	 * @param newPk_alerttype 主键值
	 */
	public AlerttypeVO(String newPk_alerttype) {

		// 为主键字段赋值:
		pk_alerttype = newPk_alerttype;

	}


	/**
	 * 返回对象标识,用来唯一定位对象.
	 *
	 * 创建日期:2011-4-15
	 * @return String
	 */
	public String getPrimaryKey() {

		return pk_alerttype;

	}

	/**
	 * 设置对象标识,用来唯一定位对象.
	 *
	 * 创建日期:2011-4-15
	 * @param newPk_alerttype  String    
	 */
	public void setPrimaryKey(String newPk_alerttype) {

		pk_alerttype = newPk_alerttype; 

	} 

	/**
	 * 返回数值对象的显示名称.
	 *
	 * 创建日期:2011-4-15
	 * @return java.lang.String 返回数值对象的显示名称.
	 */
	public String getEntityName() {

		return "pub_alerttype"; 

	} 
} 
