/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
package nc.vo.dip.dataformatdef;

import java.util.ArrayList;

import nc.util.dip.sj.IContrastUtil;
import nc.vo.pub.NullFieldException;
import nc.vo.pub.SuperVO;
import nc.vo.pub.ValidationException;
import nc.vo.pub.lang.UFDateTime;

/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2011-4-17
 * @author author
 * @version Your Project 1.0
 */
public class DataformatdefBVO extends SuperVO implements Cloneable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 3100565520512844899L;
	public String vdef4;
	public String pk_datafornatdef_b;
	public Integer dr;
	public String vdef3;//中文名称
	public String datakind;//数据项
	public String correskind;//对应项
	public Integer code;
	public String vdef2;//类型
	public String pk_dataformatdef_h;
	public String ts;
	public String vdef6;
	public String vdef1;
	public String vdef5;
	
	public static final String  VDEF4="vdef4";   
	public static final String  PK_DATAFORNATDEF_B="pk_datafornatdef_b";   
	public static final String  DR="dr";   
	public static final String  VDEF3="vdef3";   
	public static final String  DATAKIND="datakind";   
	public static final String  CORRESKIND="correskind";   
	public static final String  CODE="code";   
	public static final String  VDEF2="vdef2";   
	public static final String  PK_DATAFORMATDEF_H="pk_dataformatdef_h";   
	public static final String  TS="ts";   
	public static final String  VDEF6="vdef6";   
	public static final String  VDEF1="vdef1";   
	public static final String  VDEF5="vdef5";   


	/**
	 * 属性vdef4的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getVdef4() {
		return vdef4;
	}   

	/**
	 * 属性vdef4的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newVdef4 String
	 */
	public void setVdef4(String newVdef4) {

		vdef4 = newVdef4;
	} 	  

	/**
	 * 属性pk_datafornatdef_b的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getPk_datafornatdef_b() {
		return pk_datafornatdef_b;
	}   

	/**
	 * 属性pk_datafornatdef_b的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newPk_datafornatdef_b String
	 */
	public void setPk_datafornatdef_b(String newPk_datafornatdef_b) {

		pk_datafornatdef_b = newPk_datafornatdef_b;
	} 	  

	/**
	 * 属性dr的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return Integer
	 */
	public Integer getDr() {
		return dr;
	}   

	/**
	 * 属性dr的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newDr Integer
	 */
	public void setDr(Integer newDr) {

		dr = newDr;
	} 	  

	/**
	 * 属性vdef3的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getVdef3() {
		return vdef3;
	}   

	/**
	 * 属性vdef3的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newVdef3 String
	 */
	public void setVdef3(String newVdef3) {

		vdef3 = newVdef3;
	} 	  

	/**
	 * 属性datakind的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getDatakind() {
		return datakind;
	}   

	/**
	 * 属性datakind的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newDatakind String
	 */
	public void setDatakind(String newDatakind) {

		datakind = newDatakind;
	} 	  

	/**
	 * 属性correskind的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getCorreskind() {
		return correskind;
	}   

	/**
	 * 属性correskind的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newCorreskind String
	 */
	public void setCorreskind(String newCorreskind) {

		correskind = newCorreskind;
	} 	  

	public Integer getCode() {
		return code;
	}

	public void setCode(Integer code) {
		this.code = code;
	}

	/**
	 * 属性vdef2的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getVdef2() {
		return vdef2;
	}   

	/**
	 * 属性vdef2的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newVdef2 String
	 */
	public void setVdef2(String newVdef2) {

		vdef2 = newVdef2;
	} 	  

	/**
	 * 属性pk_dataformatdef_h的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getPk_dataformatdef_h() {
		return pk_dataformatdef_h;
	}   

	/**
	 * 属性pk_dataformatdef_h的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newPk_dataformatdef_h String
	 */
	public void setPk_dataformatdef_h(String newPk_dataformatdef_h) {

		pk_dataformatdef_h = newPk_dataformatdef_h;
	} 	  

	/**
	 * 属性ts的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return UFDateTime
	 */
	public Object getTs() {
		if(ts==null){
			return null;
		}else{
			if(IContrastUtil.VERSION.equals("nc502")){
				  return new UFDateTime(ts);
			  }else if(IContrastUtil.VERSION.equals("nc507")){
				  return ts;  
			  }
		}
		return ts;
	}   

	/**
	 * 属性ts的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newTs UFDateTime
	 */
	public void setTs(String newTs) {

		ts = newTs;
	} 	  

	/**
	 * 属性vdef6的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getVdef6() {
		return vdef6;
	}   

	/**
	 * 属性vdef6的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newVdef6 String
	 */
	public void setVdef6(String newVdef6) {

		vdef6 = newVdef6;
	} 	  

	/**
	 * 属性vdef1的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getVdef1() {
		return vdef1;
	}   

	/**
	 * 属性vdef1的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newVdef1 String
	 */
	public void setVdef1(String newVdef1) {

		vdef1 = newVdef1;
	} 	  

	/**
	 * 属性vdef5的Getter方法.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getVdef5() {
		return vdef5;
	}   

	/**
	 * 属性vdef5的Setter方法.
	 *
	 * 创建日期:2011-4-17
	 * @param newVdef5 String
	 */
	public void setVdef5(String newVdef5) {

		vdef5 = newVdef5;
	} 	  


	/**
	 * 验证对象各属性之间的数据逻辑正确性.
	 *
	 * 创建日期:2011-4-17
	 * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	 * ValidationException,对错误进行解释.
	 */
	public void validate() throws ValidationException {

		ArrayList errFields = new ArrayList(); // errFields record those null

		// fields that cannot be null.
		// 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:

		if (pk_datafornatdef_b == null) {
			errFields.add(new String("pk_datafornatdef_b"));
		}	

		StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
			String[] temp = (String[]) errFields.toArray(new String[0]);
			message.append(temp[0]);
			for ( int i= 1; i < temp.length; i++ ) {
				message.append(",");
				message.append(temp[i]);
			}
			throw new NullFieldException(message.toString());
		}
	}


	/**
	 * <p>取得父VO主键字段.
	 * <p>
	 * 创建日期:2011-4-17
	 * @return java.lang.String
	 */
	public java.lang.String getParentPKFieldName() {

		return "pk_dataformatdef_h";

	}   

	/**
	 * <p>取得表主键.
	 * <p>
	 * 创建日期:2011-4-17
	 * @return java.lang.String
	 */
	public java.lang.String getPKFieldName() {
		return "pk_datafornatdef_b";
	}

	/**
	 * <p>返回表名称.
	 * <p>
	 * 创建日期:2011-4-17
	 * @return java.lang.String
	 */
	public java.lang.String getTableName() {

		return "dip_dataformatdef_b";
	}    

	/**
	 * 按照默认方式创建构造子.
	 *
	 * 创建日期:2011-4-17
	 */
	public DataformatdefBVO() {

		super();	
	}    

	/**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2011-4-17
	 * @param newPk_datafornatdef_b 主键值
	 */
	public DataformatdefBVO(String newPk_datafornatdef_b) {

		// 为主键字段赋值:
		pk_datafornatdef_b = newPk_datafornatdef_b;

	}


	/**
	 * 返回对象标识,用来唯一定位对象.
	 *
	 * 创建日期:2011-4-17
	 * @return String
	 */
	public String getPrimaryKey() {

		return pk_datafornatdef_b;

	}

	/**
	 * 设置对象标识,用来唯一定位对象.
	 *
	 * 创建日期:2011-4-17
	 * @param newPk_datafornatdef_b  String    
	 */
	public void setPrimaryKey(String newPk_datafornatdef_b) {

		pk_datafornatdef_b = newPk_datafornatdef_b; 

	} 

	/**
	 * 返回数值对象的显示名称.
	 *
	 * 创建日期:2011-4-17
	 * @return java.lang.String 返回数值对象的显示名称.
	 */
	public String getEntityName() {

		return "dip_dataformatdef_b"; 

	} 
} 
