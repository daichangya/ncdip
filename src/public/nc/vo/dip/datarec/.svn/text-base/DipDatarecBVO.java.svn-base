  /***************************************************************\
  *     The skeleton of this class is generated by an automatic *
  * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
      	package nc.vo.dip.datarec;
   	
	import java.util.ArrayList;

import nc.util.dip.sj.IContrastUtil;
	import nc.vo.pub.*;
import nc.vo.pub.lang.*;
	
/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2011-4-7
 * @author ${vmObject.author}
 * @version Your Project 1.0
 */
     public class DipDatarecBVO extends SuperVO {
           
             public String messformat;
             public String colno;
             public String flowtype;
             public String managepro;
             public String def_str_1;
             public String ts;
             public String beginflag;
             public Integer dr;
             public String pk_datarec_b;
             public String def_str_2;
             public String pk_datarec_h;
             
             public UFBoolean trancon;
             public String formatcode;
             public String formatname;
             public String sourcetype;
             public String sourcecon;
             public String sourceparam;
             public String format;
            
             public static final String  MESSFORMAT="messformat";   
             public static final String  COLNO="colno";   
             public static final String  FLOWTYPE="flowtype";   
             public static final String  MANAGEPRO="managepro";   
             public static final String  DEF_STR_1="def_str_1";   
             public static final String  TS="ts";   
             public static final String  BEGINFLAG="beginflag";   
             public static final String  DR="dr";   
             public static final String  PK_DATAREC_B="pk_datarec_b";   
             public static final String  DEF_STR_2="def_str_2";   
             public static final String  PK_DATAREC_H="pk_datarec_h";   
      
    
             public static final String  TRANCON="trancon";   
             public static final String  FROMATCODE="formatcode";
             public static final String  FORMATNAME="formatname";
             public static final String  FORMAT="format"; 
             public static final String  SOURCEPARAM="sourceparam"; 
             public static final String  SOURCECON="sourcecon";   
             public static final String  SOURCETYPE="sourcetype";  
             
             public String getSourceparam() {
         		return sourceparam;
         	}

         	public void setSourceparam(String newSourceparam) {
         		this.sourceparam = newSourceparam;
         	} 
         	
             /**
       	   * 属性trancon的Getter方法.
       	   *
       	   * 创建日期:2011-4-7
       	   * @return UFBoolean
       	   */
       	 public UFBoolean getTrancon() {
       		 return trancon;
       	  }   
       	  
            /**
       	   * 属性trancon的Setter方法.
       	   *
       	   * 创建日期:2011-4-7
       	   * @param newTrancon UFBoolean
       	   */
       	public void setTrancon(UFBoolean newTrancon) {
       		
       		trancon = newTrancon;
       	 } 	  
              
               /**
       	   * 属性format的Getter方法.
       	   *
       	   * 创建日期:2011-4-7
       	   * @return String
       	   */
       	 public String getFormat() {
       		 return format;
       	  }   
       	  
            /**
       	   * 属性format的Setter方法.
       	   *
       	   * 创建日期:2011-4-7
       	   * @param newFormat String
       	   */
       	public void setFormat(String newFormat) {
       		
       		format = newFormat;
       	 } 	  
              
             /**
       	   * 属性sourcecon的Getter方法.
       	   *
       	   * 创建日期:2011-4-7
       	   * @return String
       	   */
       	 public String getSourcecon() {
       		 return sourcecon;
       	  }   
       	  
            /**
       	   * 属性sourcecon的Setter方法.
       	   *
       	   * 创建日期:2011-4-7
       	   * @param newSourcecon String
       	   */
       	public void setSourcecon(String newSourcecon) {
       		
       		sourcecon = newSourcecon;
       	 } 	  
              
               /**
       	   * 属性sourcetype的Getter方法.
       	   *
       	   * 创建日期:2011-4-7
       	   * @return String
       	   */
       	 public String getSourcetype() {
       		 return sourcetype;
       	  }   
       	  
            /**
       	   * 属性sourcetype的Setter方法.
       	   *
       	   * 创建日期:2011-4-7
       	   * @param newSourcetype String
       	   */
       	public void setSourcetype(String newSourcetype) {
       		
       		sourcetype = newSourcetype;
       	 } 	  
        /**
	   * 属性messformat的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getMessformat() {
		 return messformat;
	  }   
	  
     /**
	   * 属性messformat的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newMessformat String
	   */
	public void setMessformat(String newMessformat) {
		
		messformat = newMessformat;
	 } 	  
       
        /**
	   * 属性colno的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getColno() {
		 return colno;
	  }   
	  
     /**
	   * 属性colno的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newColno String
	   */
	public void setColno(String newColno) {
		
		colno = newColno;
	 } 	  
       
        /**
	   * 属性flowtype的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getFlowtype() {
		 return flowtype;
	  }   
	  
     /**
	   * 属性flowtype的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newFlowtype String
	   */
	public void setFlowtype(String newFlowtype) {
		
		flowtype = newFlowtype;
	 } 	  
       
        /**
	   * 属性managepro的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getManagepro() {
		 return managepro;
	  }   
	  
     /**
	   * 属性managepro的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newManagepro String
	   */
	public void setManagepro(String newManagepro) {
		
		managepro = newManagepro;
	 } 	  
       
        /**
	   * 属性def_str_1的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getDef_str_1() {
		 return def_str_1;
	  }   
	  
     /**
	   * 属性def_str_1的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newDef_str_1 String
	   */
	public void setDef_str_1(String newDef_str_1) {
		
		def_str_1 = newDef_str_1;
	 } 	  
       
        /**
	   * 属性ts的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return UFDateTime
	   */
	public Object getTs() {
		if(ts==null){
			return null;
		}else{
			if(IContrastUtil.VERSION.equals("nc502")){
				  return new UFDateTime(ts);
			  }else if(IContrastUtil.VERSION.equals("nc507")){
				  return ts;  
			  }
		}
		return ts;
	}  
	  
     /**
	   * 属性ts的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newTs UFDateTime
	   */
	public void setTs(String newTs) {
		
		ts = newTs;
	 } 	  
       
        /**
	   * 属性beginflag的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getBeginflag() {
		 return beginflag;
	  }   
	  
     /**
	   * 属性beginflag的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newBeginflag String
	   */
	public void setBeginflag(String newBeginflag) {
		
		beginflag = newBeginflag;
	 } 	  
       
        /**
	   * 属性dr的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return Integer
	   */
	 public Integer getDr() {
		 return dr;
	  }   
	  
     /**
	   * 属性dr的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newDr Integer
	   */
	public void setDr(Integer newDr) {
		
		dr = newDr;
	 } 	  
       
        /**
	   * 属性pk_datarec_b的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getPk_datarec_b() {
		 return pk_datarec_b;
	  }   
	  
     /**
	   * 属性pk_datarec_b的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newPk_datarec_b String
	   */
	public void setPk_datarec_b(String newPk_datarec_b) {
		
		pk_datarec_b = newPk_datarec_b;
	 } 	  
       
        /**
	   * 属性def_str_2的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getDef_str_2() {
		 return def_str_2;
	  }   
	  
     /**
	   * 属性def_str_2的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newDef_str_2 String
	   */
	public void setDef_str_2(String newDef_str_2) {
		
		def_str_2 = newDef_str_2;
	 } 	  
       
        /**
	   * 属性pk_datarec_h的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getPk_datarec_h() {
		 return pk_datarec_h;
	  }   
	  
     /**
	   * 属性pk_datarec_h的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newPk_datarec_h String
	   */
	public void setPk_datarec_h(String newPk_datarec_h) {
		
		pk_datarec_h = newPk_datarec_h;
	 } 	  
       
       
    /**
	  * 验证对象各属性之间的数据逻辑正确性.
	  *
	  * 创建日期:2011-4-7
	  * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	  * ValidationException,对错误进行解释.
	 */
	 public void validate() throws ValidationException {
	
	 	ArrayList errFields = new ArrayList(); // errFields record those null

                                                      // fields that cannot be null.
       		  // 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:
	
	   		if (pk_datarec_b == null) {
			errFields.add(new String("pk_datarec_b"));
			  }	
	   	
	    StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");
			message.append(temp[i]);
		}
		throw new NullFieldException(message.toString());
		}
	 }
			   
       
   	/**
	  * <p>取得父VO主键字段.
	  * <p>
	  * 创建日期:2011-4-7
	  * @return java.lang.String
	  */
	public java.lang.String getParentPKFieldName() {
	  	 
	 		return "pk_datarec_h";
	 	
	}   
    
    /**
	  * <p>取得表主键.
	  * <p>
	  * 创建日期:2011-4-7
	  * @return java.lang.String
	  */
	public java.lang.String getPKFieldName() {
	 	  return "pk_datarec_b";
	 	}
    
	/**
      * <p>返回表名称.
	  * <p>
	  * 创建日期:2011-4-7
	  * @return java.lang.String
	 */
	public java.lang.String getTableName() {
				
		return "dip_datarec_b";
	}    
    
    /**
	  * 按照默认方式创建构造子.
	  *
	  * 创建日期:2011-4-7
	  */
	public DipDatarecBVO() {
			
			   super();	
	  }    
    
            /**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2011-4-7
	 * @param newPk_datarec_b 主键值
	 */
	 public DipDatarecBVO(String newPk_datarec_b) {
		
		// 为主键字段赋值:
		 pk_datarec_b = newPk_datarec_b;
	
    	}
    
     
     /**
	  * 返回对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2011-4-7
	  * @return String
	  */
	   public String getPrimaryKey() {
				
		 return pk_datarec_b;
	   
	   }

     /**
	  * 设置对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2011-4-7
	  * @param newPk_datarec_b  String    
	  */
	 public void setPrimaryKey(String newPk_datarec_b) {
				
				pk_datarec_b = newPk_datarec_b; 
				
	 } 
           
	  /**
       * 返回数值对象的显示名称.
	   *
	   * 创建日期:2011-4-7
	   * @return java.lang.String 返回数值对象的显示名称.
	   */
	 public String getEntityName() {
				
	   return "dip_datarec_b"; 
				
	 }

	public String getFormatcode() {
		return formatcode;
	}

	public void setFormatcode(String newFormatcode) {
		this.formatcode = newFormatcode;
	}

	public String getFormatname() {
		return formatname;
	}

	public void setFormatname(String newFormatname) {
		this.formatname = newFormatname;
	} 
} 
