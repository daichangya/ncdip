/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
package nc.vo.dip.dataproce;

import java.util.ArrayList;

import nc.util.dip.sj.IContrastUtil;
import nc.vo.pub.*;
import nc.vo.pub.lang.*;

/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2011-4-7
 * @author ${vmObject.author}
 * @version Your Project 1.0
 */
public class DipDataproceBVO extends SuperVO {

	public String pk_dataproce_h;
	public UFBoolean isquote;
	public String type;
	public String pk_dataproce_b;
	public UFBoolean isonlyconst;
	public Integer length;
	public Integer dr;
	public String ename;
	public String quotecolu;
	public Integer deciplace;
	public String quotetable;
	public String def_str_1;
	public String ts;
	public String def_str_2;
	public UFBoolean ispk;
	public String cname;
	public UFBoolean isimport;
	//2011-6-24
	public UFBoolean issyspk;

	public static final String  PK_DATAPROCE_H="pk_dataproce_h";   
	public static final String  ISQUOTE="isquote";   
	public static final String  TYPE="type";   
	public static final String  PK_DATAPROCE_B="pk_dataproce_b";   
	public static final String  ISONLYCONST="isonlyconst";   
	public static final String  LENGTH="length";   
	public static final String  DR="dr";   
	public static final String  ENAME="ename";   
	public static final String  QUOTECOLU="quotecolu";   
	public static final String  DECIPLACE="deciplace";   
	public static final String  QUOTETABLE="quotetable";   
	public static final String  DEF_STR_1="def_str_1";   
	public static final String  TS="ts";   
	public static final String  DEF_STR_2="def_str_2";   
	public static final String  ISPK="ispk";   
	public static final String  CNAME="cname";  
	public static final String ISIMPORT="isimport";
	public static final String  ISSYSPK="issyspk";


	public UFBoolean getIsimport() {
		return isimport;
	}

	public void setIsimport(UFBoolean isimport) {
		this.isimport = isimport;
	}

	/**
	 * 属性pk_dataproce_h的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getPk_dataproce_h() {
		return pk_dataproce_h;
	}   

	/**
	 * 属性pk_dataproce_h的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newPk_dataproce_h String
	 */
	public void setPk_dataproce_h(String newPk_dataproce_h) {

		pk_dataproce_h = newPk_dataproce_h;
	} 	  

	/**
	 * 属性isquote的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return UFBoolean
	 */
	public UFBoolean getIsquote() {
		return isquote;
	}   

	/**
	 * 属性isquote的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newIsquote UFBoolean
	 */
	public void setIsquote(UFBoolean newIsquote) {

		isquote = newIsquote;
	} 	  

	/**
	 * 属性type的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getType() {
		return type;
	}   

	/**
	 * 属性type的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newType String
	 */
	public void setType(String newType) {

		type = newType;
	} 	  

	/**
	 * 属性pk_dataproce_b的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getPk_dataproce_b() {
		return pk_dataproce_b;
	}   

	/**
	 * 属性pk_dataproce_b的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newPk_dataproce_b String
	 */
	public void setPk_dataproce_b(String newPk_dataproce_b) {

		pk_dataproce_b = newPk_dataproce_b;
	} 	  

	/**
	 * 属性isonlyconst的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return UFBoolean
	 */
	public UFBoolean getIsonlyconst() {
		return isonlyconst;
	}   

	/**
	 * 属性isonlyconst的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newIsonlyconst UFBoolean
	 */
	public void setIsonlyconst(UFBoolean newIsonlyconst) {

		isonlyconst = newIsonlyconst;
	} 	  

	/**
	 * 属性length的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return Integer
	 */
	public Integer getLength() {
		return length;
	}   

	/**
	 * 属性length的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newLength Integer
	 */
	public void setLength(Integer newLength) {

		length = newLength;
	} 	  

	/**
	 * 属性dr的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return Integer
	 */
	public Integer getDr() {
		return dr;
	}   

	/**
	 * 属性dr的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newDr Integer
	 */
	public void setDr(Integer newDr) {

		dr = newDr;
	} 	  

	/**
	 * 属性ename的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getEname() {
		return ename;
	}   

	/**
	 * 属性ename的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newEname String
	 */
	public void setEname(String newEname) {

		ename = newEname;
	} 	  

	/**
	 * 属性quotecolu的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getQuotecolu() {
		return quotecolu;
	}   

	/**
	 * 属性quotecolu的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newQuotecolu String
	 */
	public void setQuotecolu(String newQuotecolu) {

		quotecolu = newQuotecolu;
	} 	  

	/**
	 * 属性deciplace的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return Integer
	 */
	public Integer getDeciplace() {
		return deciplace;
	}   

	/**
	 * 属性deciplace的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newDeciplace Integer
	 */
	public void setDeciplace(Integer newDeciplace) {

		deciplace = newDeciplace;
	} 	  

	/**
	 * 属性quotetable的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getQuotetable() {
		return quotetable;
	}   

	/**
	 * 属性quotetable的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newQuotetable String
	 */
	public void setQuotetable(String newQuotetable) {

		quotetable = newQuotetable;
	} 	  

	/**
	 * 属性def_str_1的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getDef_str_1() {
		return def_str_1;
	}   

	/**
	 * 属性def_str_1的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newDef_str_1 String
	 */
	public void setDef_str_1(String newDef_str_1) {

		def_str_1 = newDef_str_1;
	} 	  

	/**
	 * 属性ts的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return UFDateTime
	 */
	public Object getTs() {
		if(ts==null){
			return null;
		}else{
			if(IContrastUtil.VERSION.equals("nc502")){
				  return new UFDateTime(ts);
			  }else if(IContrastUtil.VERSION.equals("nc507")){
				  return ts;  
			  }
		}
		return ts;
	}  

	/**
	 * 属性ts的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newTs UFDateTime
	 */
	public void setTs(String newTs) {

		ts = newTs;
	} 	  

	/**
	 * 属性def_str_2的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getDef_str_2() {
		return def_str_2;
	}   

	/**
	 * 属性def_str_2的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newDef_str_2 String
	 */
	public void setDef_str_2(String newDef_str_2) {

		def_str_2 = newDef_str_2;
	} 	  

	/**
	 * 属性ispk的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return UFBoolean
	 */
	public UFBoolean getIspk() {
		return ispk;
	}   

	/**
	 * 属性ispk的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newIspk UFBoolean
	 */
	public void setIspk(UFBoolean newIspk) {

		ispk = newIspk;
	} 	  

	/**
	 * 属性cname的Getter方法.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getCname() {
		return cname;
	}   

	/**
	 * 属性cname的Setter方法.
	 *
	 * 创建日期:2011-4-7
	 * @param newCname String
	 */
	public void setCname(String newCname) {

		cname = newCname;
	} 	  


	/**
	 * 验证对象各属性之间的数据逻辑正确性.
	 *
	 * 创建日期:2011-4-7
	 * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	 * ValidationException,对错误进行解释.
	 */
	public void validate() throws ValidationException {

		ArrayList errFields = new ArrayList(); // errFields record those null

		// fields that cannot be null.
		// 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:

		if (pk_dataproce_b == null) {
			errFields.add(new String("pk_dataproce_b"));
		}	

		StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
			String[] temp = (String[]) errFields.toArray(new String[0]);
			message.append(temp[0]);
			for ( int i= 1; i < temp.length; i++ ) {
				message.append(",");
				message.append(temp[i]);
			}
			throw new NullFieldException(message.toString());
		}
	}


	/**
	 * <p>取得父VO主键字段.
	 * <p>
	 * 创建日期:2011-4-7
	 * @return java.lang.String
	 */
	public java.lang.String getParentPKFieldName() {

		return "pk_dataproce_h";

	}   

	/**
	 * <p>取得表主键.
	 * <p>
	 * 创建日期:2011-4-7
	 * @return java.lang.String
	 */
	public java.lang.String getPKFieldName() {
		return "pk_dataproce_b";
	}

	/**
	 * <p>返回表名称.
	 * <p>
	 * 创建日期:2011-4-7
	 * @return java.lang.String
	 */
	public java.lang.String getTableName() {

		return "dip_dataproce_b";
	}    

	/**
	 * 按照默认方式创建构造子.
	 *
	 * 创建日期:2011-4-7
	 */
	public DipDataproceBVO() {

		super();	
	}    

	/**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2011-4-7
	 * @param newPk_dataproce_b 主键值
	 */
	public DipDataproceBVO(String newPk_dataproce_b) {

		// 为主键字段赋值:
		pk_dataproce_b = newPk_dataproce_b;

	}


	/**
	 * 返回对象标识,用来唯一定位对象.
	 *
	 * 创建日期:2011-4-7
	 * @return String
	 */
	public String getPrimaryKey() {

		return pk_dataproce_b;

	}

	/**
	 * 设置对象标识,用来唯一定位对象.
	 *
	 * 创建日期:2011-4-7
	 * @param newPk_dataproce_b  String    
	 */
	public void setPrimaryKey(String newPk_dataproce_b) {

		pk_dataproce_b = newPk_dataproce_b; 

	} 

	/**
	 * 返回数值对象的显示名称.
	 *
	 * 创建日期:2011-4-7
	 * @return java.lang.String 返回数值对象的显示名称.
	 */
	public String getEntityName() {

		return "dip_dataproce_b"; 

	}

	public UFBoolean getIssyspk() {
		return issyspk;
	}

	public void setIssyspk(UFBoolean issyspk) {
		this.issyspk = issyspk;
	} 
} 
