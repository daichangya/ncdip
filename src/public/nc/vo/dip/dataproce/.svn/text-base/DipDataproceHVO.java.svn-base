  /***************************************************************\
  *     The skeleton of this class is generated by an automatic *
  * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
      	package nc.vo.dip.dataproce;
   	
	import java.util.ArrayList;

import nc.util.dip.sj.IContrastUtil;
	import nc.vo.pub.*;
import nc.vo.pub.lang.*;
	
/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2011-4-7
 * @author ${vmObject.author}
 * @version Your Project 1.0
 */
     public class DipDataproceHVO extends SuperVO {
           
             public String pk_dataproce_h;
             public String pk_datadefinit_h;
             public String def_str_3;
             public String firsttab;
             public Integer dr;
             public String def_str_4;
             public String endstatus;
             public String procecond;
             public String code;
             public String procetype;
             public String def_str_1;
             public String ts;
             public String constatus;
             public String firstdata;
             public String procetab;
             public String def_str_2;
             public UFBoolean isadd;
             public String name;
             public String tasktype;
             public String refprocecond;
             public  String datacontrol;
             public String fpk;
             public String remark;
             public String pk_xt;
             public UFBoolean isfolder; 

             public static final String PK_XT="pk_xt";
             public static final String ISFOLDER="isfolder"; 
             public static final String  PK_DATAPROCE_H="pk_dataproce_h";   
             public static final String  DEF_STR_3="def_str_3";   
             public static final String  FIRSTTAB="firsttab";   
             public static final String  DR="dr";   
             public static final String  DEF_STR_4="def_str_4";   
             public static final String  ENDSTATUS="endstatus";   
             public static final String  PROCECOND="procecond";   
             public static final String  CODE="code";   
             public static final String  PROCETYPE="procetype";   
             public static final String  DEF_STR_1="def_str_1";   
             public static final String  TS="ts";   
             public static final String  CONSTATUS="constatus";   
             public static final String  FIRSTDATA="firstdata";   
             public static final String  PROCETAB="procetab";   
             public static final String  DEF_STR_2="def_str_2";   
             public static final String  ISADD="isadd";   
             public static final String  NAME="name"; 
             public static final String    PK_DATADEFINIT_H="Pk_datadefinit_h";
             public static final String  TASKTYPE="tasktype";
             public static final String DATACONTROL="datacontrol";
             public static final String REMARK="remark";
             
    
             
             
        public UFBoolean getIsfolder() {
				return isfolder;
			}

			public void setIsfolder(UFBoolean isfolder) {
				this.isfolder = isfolder;
			}

			public String getPk_xt() {
				return pk_xt;
			}

			public void setPk_xt(String pk_xt) {
				this.pk_xt = pk_xt;
			}

		public String getDatacontrol() {
				return datacontrol;
			}

			public void setDatacontrol(String datacontrol) {
				this.datacontrol = datacontrol;
			}

		public String getRefprocecond() {
				return refprocecond;
			}

			public void setRefprocecond(String refprocecond) {
				this.refprocecond = refprocecond;
			}

		public String getTasktype() {
				return tasktype;
			}

			public void setTasktype(String tasktype) {
				this.tasktype = tasktype;
			}

		/**
	   * 属性pk_dataproce_h的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getPk_dataproce_h() {
		 return pk_dataproce_h;
	  }   
	  
     /**
	   * 属性pk_dataproce_h的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newPk_dataproce_h String
	   */
	public void setPk_dataproce_h(String newPk_dataproce_h) {
		
		pk_dataproce_h = newPk_dataproce_h;
	 } 	  
       
        /**
	   * 属性def_str_3的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getDef_str_3() {
		 return def_str_3;
	  }   
	  
     /**
	   * 属性def_str_3的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newDef_str_3 String
	   */
	public void setDef_str_3(String newDef_str_3) {
		
		def_str_3 = newDef_str_3;
	 } 	  
       
        /**
	   * 属性firsttab的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getFirsttab() {
		 return firsttab;
	  }   
	  
     /**
	   * 属性firsttab的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newFirsttab String
	   */
	public void setFirsttab(String newFirsttab) {
		
		firsttab = newFirsttab;
	 } 	  
       
        /**
	   * 属性dr的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return Integer
	   */
	 public Integer getDr() {
		 return dr;
	  }   
	  
     /**
	   * 属性dr的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newDr Integer
	   */
	public void setDr(Integer newDr) {
		
		dr = newDr;
	 } 	  
       
        /**
	   * 属性def_str_4的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getDef_str_4() {
		 return def_str_4;
	  }   
	  
     /**
	   * 属性def_str_4的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newDef_str_4 String
	   */
	public void setDef_str_4(String newDef_str_4) {
		
		def_str_4 = newDef_str_4;
	 } 	  
       
        /**
	   * 属性endstatus的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getEndstatus() {
		 return endstatus;
	  }   
	  
     /**
	   * 属性endstatus的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newEndstatus String
	   */
	public void setEndstatus(String newEndstatus) {
		
		endstatus = newEndstatus;
	 } 	  
       
        /**
	   * 属性procecond的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getProcecond() {
		 return procecond;
	  }   
	  
     /**
	   * 属性procecond的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newProcecond String
	   */
	public void setProcecond(String newProcecond) {
		
		procecond = newProcecond;
	 } 	  
       
        /**
	   * 属性code的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getCode() {
		 return code;
	  }   
	  
     /**
	   * 属性code的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newCode String
	   */
	public void setCode(String newCode) {
		
		code = newCode;
	 } 	  
       
        /**
	   * 属性procetype的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getProcetype() {
		 return procetype;
	  }   
	  
     /**
	   * 属性procetype的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newProcetype String
	   */
	public void setProcetype(String newProcetype) {
		
		procetype = newProcetype;
	 } 	  
       
        /**
	   * 属性def_str_1的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getDef_str_1() {
		 return def_str_1;
	  }   
	  
     /**
	   * 属性def_str_1的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newDef_str_1 String
	   */
	public void setDef_str_1(String newDef_str_1) {
		
		def_str_1 = newDef_str_1;
	 } 	  
       
        /**
	   * 属性ts的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return UFDateTime
	   */
	public Object getTs() {
		if(ts==null){
			return null;
		}else{
			if(IContrastUtil.VERSION.equals("nc502")){
				  return new UFDateTime(ts);
			  }else if(IContrastUtil.VERSION.equals("nc507")){
				  return ts;  
			  }
		}
		return ts;
	}    
	  
     /**
	   * 属性ts的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newTs UFDateTime
	   */
	public void setTs(String newTs) {
		
		ts = newTs;
	 } 	  
       
        /**
	   * 属性constatus的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getConstatus() {
		 return constatus;
	  }   
	  
     /**
	   * 属性constatus的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newConstatus String
	   */
	public void setConstatus(String newConstatus) {
		
		constatus = newConstatus;
	 } 	  
       
        /**
	   * 属性firstdata的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getFirstdata() {
		 return firstdata;
	  }   
	  
     /**
	   * 属性firstdata的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newFirstdata String
	   */
	public void setFirstdata(String newFirstdata) {
		
		firstdata = newFirstdata;
	 } 	  
       
        /**
	   * 属性procetab的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getProcetab() {
		 return procetab;
	  }   
	  
     /**
	   * 属性procetab的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newProcetab String
	   */
	public void setProcetab(String newProcetab) {
		
		procetab = newProcetab;
	 } 	  
       
        /**
	   * 属性def_str_2的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getDef_str_2() {
		 return def_str_2;
	  }   
	  
     /**
	   * 属性def_str_2的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newDef_str_2 String
	   */
	public void setDef_str_2(String newDef_str_2) {
		
		def_str_2 = newDef_str_2;
	 } 	  
       
        /**
	   * 属性isadd的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return UFBoolean
	   */
	 public UFBoolean getIsadd() {
		 return isadd;
	  }   
	  
     /**
	   * 属性isadd的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newIsadd UFBoolean
	   */
	public void setIsadd(UFBoolean newIsadd) {
		
		isadd = newIsadd;
	 } 	  
       
        /**
	   * 属性name的Getter方法.
	   *
	   * 创建日期:2011-4-7
	   * @return String
	   */
	 public String getName() {
		 return name;
	  }   
	  
     /**
	   * 属性name的Setter方法.
	   *
	   * 创建日期:2011-4-7
	   * @param newName String
	   */
	public void setName(String newName) {
		
		name = newName;
	 } 	  
       
       
    /**
	  * 验证对象各属性之间的数据逻辑正确性.
	  *
	  * 创建日期:2011-4-7
	  * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	  * ValidationException,对错误进行解释.
	 */
	 public void validate() throws ValidationException {
	
	 	ArrayList errFields = new ArrayList(); // errFields record those null

                                                      // fields that cannot be null.
       		  // 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:
	
	   		if (pk_dataproce_h == null) {
			errFields.add(new String("pk_dataproce_h"));
			  }	
	   	
	    StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");
			message.append(temp[i]);
		}
		throw new NullFieldException(message.toString());
		}
	 }
			   
       
   	/**
	  * <p>取得父VO主键字段.
	  * <p>
	  * 创建日期:2011-4-7
	  * @return java.lang.String
	  */
	public java.lang.String getParentPKFieldName() {
	  	 
	 	    return "fpk";
	 	
	}   
    
    /**
	  * <p>取得表主键.
	  * <p>
	  * 创建日期:2011-4-7
	  * @return java.lang.String
	  */
	public java.lang.String getPKFieldName() {
	 	  return "pk_dataproce_h";
	 	}
    
	/**
      * <p>返回表名称.
	  * <p>
	  * 创建日期:2011-4-7
	  * @return java.lang.String
	 */
	public java.lang.String getTableName() {
				
		return "dip_dataproce_h";
	}    
    
    /**
	  * 按照默认方式创建构造子.
	  *
	  * 创建日期:2011-4-7
	  */
	public DipDataproceHVO() {
			
			   super();	
	  }    
    
            /**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2011-4-7
	 * @param newPk_dataproce_h 主键值
	 */
	 public DipDataproceHVO(String newPk_dataproce_h) {
		
		// 为主键字段赋值:
		 pk_dataproce_h = newPk_dataproce_h;
	
    	}
    
     
     /**
	  * 返回对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2011-4-7
	  * @return String
	  */
	   public String getPrimaryKey() {
				
		 return pk_dataproce_h;
	   
	   }

     /**
	  * 设置对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2011-4-7
	  * @param newPk_dataproce_h  String    
	  */
	 public void setPrimaryKey(String newPk_dataproce_h) {
				
				pk_dataproce_h = newPk_dataproce_h; 
				
	 } 
           
	  /**
       * 返回数值对象的显示名称.
	   *
	   * 创建日期:2011-4-7
	   * @return java.lang.String 返回数值对象的显示名称.
	   */
	 public String getEntityName() {
				
	   return "dip_dataproce_h"; 
				
	 }

	public String getPk_datadefinit_h() {
		return pk_datadefinit_h;
	}

	public void setPk_datadefinit_h(String pk_datadefinit_h) {
		this.pk_datadefinit_h = pk_datadefinit_h;
	}

	public static String getPK_DATADEFINIT_H() {
		return PK_DATADEFINIT_H;
	}

	public String getFpk() {
		return fpk;
	}

	public void setFpk(String fpk) {
		this.fpk = fpk;
	}

	public String getRemark() {
		return remark;
	}

	public void setRemark(String remark) {
		this.remark = remark;
	} 
} 
