  /***************************************************************\
  *     The skeleton of this class is generated by an automatic *
  * code generator for NC product. It is based on Velocity.     *
  \***************************************************************/
      	package nc.vo.dip.control;
   	
	import java.util.ArrayList;

import nc.util.dip.sj.IContrastUtil;
	import nc.vo.pub.*;
import nc.vo.pub.lang.*;
	
/**
 * <b> 在此处简要描述此类的功能 </b>
 *
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 *
 * 创建日期:2011-7-20
 * @author author
 * @version Your Project 1.0
 */
     public class ControlVO extends SuperVO {
           
             public String bustype;
             public String vdef4;
             public String tabname;
             public String tabcname;
             public String pk_bus;
             public Integer dr;
             public String kzclzt;
             public String vdef3;
             public String vdef2;
             public String ts;
             public String pk_control;
             public String vdef1;
             public String vdef5;
             public String kzjszt;
             public Integer disno;
            
             public static final String  BUSTYPE="bustype";   
             public static final String  VDEF4="vdef4";   
             public static final String  TABNAME="tabname";   
             public static final String  TABCNAME="tabcname";   
             public static final String  PK_BUS="pk_bus";   
             public static final String  DR="dr";   
             public static final String  KZCLZT="kzclzt";   
             public static final String  VDEF3="vdef3";   
             public static final String  VDEF2="vdef2";   
             public static final String  TS="ts";   
             public static final String  PK_CONTROL="pk_control";   
             public static final String  VDEF1="vdef1";   
             public static final String  VDEF5="vdef5";   
             public static final String  KZJSZT="kzjszt";   
      
    
        /**
	   * 属性bustype的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getBustype() {
		 return bustype;
	  }   
	  
     /**
	   * 属性bustype的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newBustype String
	   */
	public void setBustype(String newBustype) {
		
		bustype = newBustype;
	 } 	  
       
        /**
	   * 属性vdef4的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getVdef4() {
		 return vdef4;
	  }   
	  
     /**
	   * 属性vdef4的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newVdef4 String
	   */
	public void setVdef4(String newVdef4) {
		
		vdef4 = newVdef4;
	 } 	  
       
        /**
	   * 属性tabname的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getTabname() {
		 return tabname;
	  }   
	  
     /**
	   * 属性tabname的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newTabname String
	   */
	public void setTabname(String newTabname) {
		
		tabname = newTabname;
	 } 	  
       
        /**
	   * 属性tabcname的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getTabcname() {
		 return tabcname;
	  }   
	  
     /**
	   * 属性tabcname的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newTabcname String
	   */
	public void setTabcname(String newTabcname) {
		
		tabcname = newTabcname;
	 } 	  
       
        /**
	   * 属性pk_bus的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getPk_bus() {
		 return pk_bus;
	  }   
	  
     /**
	   * 属性pk_bus的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newPk_bus String
	   */
	public void setPk_bus(String newPk_bus) {
		
		pk_bus = newPk_bus;
	 } 	  
       
        /**
	   * 属性dr的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return Integer
	   */
	 public Integer getDr() {
		 return dr;
	  }   
	  
     /**
	   * 属性dr的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newDr Integer
	   */
	public void setDr(Integer newDr) {
		
		dr = newDr;
	 } 	  
       
        /**
	   * 属性kzclzt的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getKzclzt() {
		 return kzclzt;
	  }   
	  
     /**
	   * 属性kzclzt的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newKzclzt String
	   */
	public void setKzclzt(String newKzclzt) {
		
		kzclzt = newKzclzt;
	 } 	  
       
        /**
	   * 属性vdef3的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getVdef3() {
		 return vdef3;
	  }   
	  
     /**
	   * 属性vdef3的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newVdef3 String
	   */
	public void setVdef3(String newVdef3) {
		
		vdef3 = newVdef3;
	 } 	  
       
        /**
	   * 属性vdef2的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getVdef2() {
		 return vdef2;
	  }   
	  
     /**
	   * 属性vdef2的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newVdef2 String
	   */
	public void setVdef2(String newVdef2) {
		
		vdef2 = newVdef2;
	 } 	  
       
        /**
	   * 属性ts的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return UFDateTime
	   */
	public Object getTs() {
		if(ts==null){
			return null;
		}else{
			if(IContrastUtil.VERSION.equals("nc502")){
				  return new UFDateTime(ts);
			  }else if(IContrastUtil.VERSION.equals("nc507")){
				  return ts;  
			  }
		}
		return ts;
	}   
	  
     /**
	   * 属性ts的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newTs UFDateTime
	   */
	public void setTs(String newTs) {
		
		ts = newTs;
	 } 	  
       
        /**
	   * 属性pk_control的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getPk_control() {
		 return pk_control;
	  }   
	  
     /**
	   * 属性pk_control的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newPk_control String
	   */
	public void setPk_control(String newPk_control) {
		
		pk_control = newPk_control;
	 } 	  
       
        /**
	   * 属性vdef1的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getVdef1() {
		 return vdef1;
	  }   
	  
     /**
	   * 属性vdef1的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newVdef1 String
	   */
	public void setVdef1(String newVdef1) {
		
		vdef1 = newVdef1;
	 } 	  
       
        /**
	   * 属性vdef5的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getVdef5() {
		 return vdef5;
	  }   
	  
     /**
	   * 属性vdef5的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newVdef5 String
	   */
	public void setVdef5(String newVdef5) {
		
		vdef5 = newVdef5;
	 } 	  
       
        /**
	   * 属性kzjszt的Getter方法.
	   *
	   * 创建日期:2011-7-20
	   * @return String
	   */
	 public String getKzjszt() {
		 return kzjszt;
	  }   
	  
     /**
	   * 属性kzjszt的Setter方法.
	   *
	   * 创建日期:2011-7-20
	   * @param newKzjszt String
	   */
	public void setKzjszt(String newKzjszt) {
		
		kzjszt = newKzjszt;
	 } 	  
       
       
    /**
	  * 验证对象各属性之间的数据逻辑正确性.
	  *
	  * 创建日期:2011-7-20
	  * @exception nc.vo.pub.ValidationException 如果验证失败,抛出
	  * ValidationException,对错误进行解释.
	 */
	 public void validate() throws ValidationException {
	
	 	ArrayList errFields = new ArrayList(); // errFields record those null

                                                      // fields that cannot be null.
       		  // 检查是否为不允许空的字段赋了空值,你可能需要修改下面的提示信息:
	
	   		if (pk_control == null) {
			errFields.add(new String("pk_control"));
			  }	
	   	
	    StringBuffer message = new StringBuffer();
		message.append("下列字段不能为空:");
		if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(",");
			message.append(temp[i]);
		}
		throw new NullFieldException(message.toString());
		}
	 }
			   
       
   	/**
	  * <p>取得父VO主键字段.
	  * <p>
	  * 创建日期:2011-7-20
	  * @return java.lang.String
	  */
	public java.lang.String getParentPKFieldName() {
	  	 
	 	    return null;
	 	
	}   
    
    /**
	  * <p>取得表主键.
	  * <p>
	  * 创建日期:2011-7-20
	  * @return java.lang.String
	  */
	public java.lang.String getPKFieldName() {
	 	  return "pk_control";
	 	}
    
	/**
      * <p>返回表名称.
	  * <p>
	  * 创建日期:2011-7-20
	  * @return java.lang.String
	 */
	public java.lang.String getTableName() {
				
		return "dip_control";
	}    
    
    /**
	  * 按照默认方式创建构造子.
	  *
	  * 创建日期:2011-7-20
	  */
	public ControlVO() {
			
			   super();	
	  }    
    
            /**
	 * 使用主键进行初始化的构造子.
	 *
	 * 创建日期:2011-7-20
	 * @param newPk_control 主键值
	 */
	 public ControlVO(String newPk_control) {
		
		// 为主键字段赋值:
		 pk_control = newPk_control;
	
    	}
    
     
     /**
	  * 返回对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2011-7-20
	  * @return String
	  */
	   public String getPrimaryKey() {
				
		 return pk_control;
	   
	   }

     /**
	  * 设置对象标识,用来唯一定位对象.
	  *
	  * 创建日期:2011-7-20
	  * @param newPk_control  String    
	  */
	 public void setPrimaryKey(String newPk_control) {
				
				pk_control = newPk_control; 
				
	 } 
           
	  /**
       * 返回数值对象的显示名称.
	   *
	   * 创建日期:2011-7-20
	   * @return java.lang.String 返回数值对象的显示名称.
	   */
	 public String getEntityName() {
				
	   return "dip_control"; 
				
	 }

	public Integer getDisno() {
		return disno;
	}

	public void setDisno(Integer disno) {
		this.disno = disno;
	} 
} 
